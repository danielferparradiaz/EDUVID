const contentModel = require("../models/contentModel");

// Crear lecci√≥n
exports.createLesson = async (req, res) => {
  try {
    console.log("üì• [createLesson] Request body recibido:", req.body);

    const newLesson = req.body;
    const lesson = await contentModel.createLesson(newLesson);

    console.log("‚úÖ [createLesson] Lecci√≥n creada:", lesson);
    res.status(201).json(lesson);
  } catch (error) {
    console.error("‚ùå [createLesson] Error al crear lecci√≥n:", error);
    res.status(500).json({ message: "Error al crear la lecci√≥n" });
  }
};

// Listar lecciones por curso
exports.getLessonsByCourse = async (req, res) => {
  try {
    const { courseId } = req.query;
    console.log("üì• [getLessonsByCourse] Query params recibidos:", req.query);

    const lessons = await contentModel.getLessonsByCourse(courseId);

    console.log(`‚úÖ [getLessonsByCourse] Lecciones encontradas para curso ${courseId}:`, lessons);
    res.json(lessons);
  } catch (error) {
    console.error("‚ùå [getLessonsByCourse] Error al obtener lecciones:", error);
    res.status(500).json({ message: "Error al obtener lecciones" });
  }
};

// Obtener detalle de una lecci√≥n
exports.getLessonById = async (req, res) => {
  try {
    const { id } = req.params;
    console.log("üì• [getLessonById] Params recibidos:", req.params);

    const lesson = await contentModel.getLessonById(parseInt(id));

    if (!lesson) {
      console.warn(`‚ö†Ô∏è [getLessonById] Lecci√≥n con ID ${id} no encontrada`);
      return res.status(404).json({ message: "Lesson not found" });
    }

    console.log("‚úÖ [getLessonById] Lecci√≥n encontrada:", lesson);
    res.json(lesson);
  } catch (error) {
    console.error("‚ùå [getLessonById] Error al obtener lecci√≥n:", error);
    res.status(500).json({ message: "Error al obtener la lecci√≥n" });
  }
};


// Editar lecci√≥n
exports.updateLesson = async (req, res) => {
  try {
    const { id } = req.params;
    console.log("üì• [updateLesson] Params recibidos:", req.params);
    console.log("üì• [updateLesson] Body recibido:", req.body);

    const updated = await contentModel.updateLesson(parseInt(id), req.body);

    if (!updated) {
      console.warn(`‚ö†Ô∏è [updateLesson] Lecci√≥n con ID ${id} no encontrada`);
      return res.status(404).json({ message: "Lesson not found" });
    }

    console.log("‚úÖ [updateLesson] Lecci√≥n actualizada:", updated);
    res.json(updated);
  } catch (error) {
    console.error("‚ùå [updateLesson] Error al actualizar lecci√≥n:", error);
    res.status(500).json({ message: "Error al actualizar la lecci√≥n" });
  }
};

// Eliminar lecci√≥n
exports.deleteLesson = async (req, res) => {
  try {
    const { id } = req.params;
    console.log("üì• [deleteLesson] Params recibidos:", req.params);

    const deleted = await contentModel.deleteLesson(parseInt(id));

    if (!deleted) {
      console.warn(`‚ö†Ô∏è [deleteLesson] Lecci√≥n con ID ${id} no encontrada`);
      return res.status(404).json({ message: "Lesson not found" });
    }

    console.log("‚úÖ [deleteLesson] Lecci√≥n eliminada:", deleted);
    res.json({ message: "Lesson deleted" });
  } catch (error) {
    console.error("‚ùå [deleteLesson] Error al eliminar lecci√≥n:", error);
    res.status(500).json({ message: "Error al eliminar la lecci√≥n" });
  }
};

